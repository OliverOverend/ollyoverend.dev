{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"blog/tags/","title":"Tags","text":""},{"location":"blog/tags/#tag:dependencies","title":"dependencies","text":"<ul> <li>            Managing Python Dependencies          </li> </ul>"},{"location":"blog/2025/06/21/managing-python-dependencies/","title":"Managing Python Dependencies","text":"<p>Python packages often rely on a complex network of other packages to function. When publishing a Python package, it\u2019s essential to define which dependencies are required and to specify the range of compatible versions.</p>","tags":["dependencies"]},{"location":"blog/2025/06/21/managing-python-dependencies/#application","title":"Application","text":"<p>An application is a Python package designed to be executed directly by users or deployed as a standalone service. There is typically no requirement for an application to be compatible with other libraries. To ensure reproducibility across development, testing, and production environments, it's best practice to pin all dependencies and sub-dependencies using a lockfile (e.g. <code>requirements.txt</code> or <code>poetry.lock</code>).</p>","tags":["dependencies"]},{"location":"blog/2025/06/21/managing-python-dependencies/#library","title":"Library","text":"<p>A library is a Python package designed to be used alongside other libraries within a shared environment. Unlike applications, avoid pinning exact dependency versions to avoid conflicts when other libraries require different versions of the same dependency. </p> <p>Instead:</p> <ul> <li>Set a strict lower bound: Require versions that include critical features or fixes your library depends on. This encourages users to use more recent, stable versions.</li> <li>Avoid upper bounds unless necessary: Overly restrictive caps can break compatibility with other libraries that have strict lower bounds. Upper bounds are justified when a known version is broken or incompatible, or an upcoming release introduces breaking changes. In such cases, aim to remove them quickly once compatibility is restored.</li> </ul>","tags":["dependencies"]},{"location":"blog/2025/06/21/managing-python-dependencies/#further-reading","title":"Further Reading","text":"<ul> <li>Should You Use Upper Bound Version Constraints?</li> <li>Setup vs. Requirements</li> </ul>","tags":["dependencies"]},{"location":"blog/2025/06/20/recently-read/","title":"Recently Read","text":"<p>Here is a list of things that I have recently read.</p> <ul> <li>Design Docs at Google</li> </ul>"},{"location":"blog/archive/2025/","title":"June 2025","text":""},{"location":"blog/category/python/","title":"Python","text":""}]}